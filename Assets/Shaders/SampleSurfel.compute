#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

struct Surfel
{
    float3 position;
    float3 normal;
    float3 albedo;
    float skyMask;
};

RWStructuredBuffer<Surfel> _surfels;
TextureCube _worldPosCubemap;
TextureCube _normalCubemap;
TextureCube _albedoCubemap;
SamplerState sampler_point_clamp;
float4 _probePos;

const float PI = 3.14159265359;
const float TWO_PI= 6.28318530718;


float RadicalInverse( uint bits ){
          //reverse bit
          bits = (bits << 16u) | (bits >> 16u); 
          bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
          bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
          bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
          bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
          return  float(bits) * 2.3283064365386963e-10;
}

vec2 Hammersley(uint i,uint N){
          return vec2(float(i) / float(N), RadicalInverse(i));
}


float3 sphereSample_uniform(float u, float v)
{
    float phi =  2.0 * PI * u;
    float cosTheta= 1.0 - 2.0 * v;
    float sinTheta  = sqrt(1.0 - cosTheta* cosTheta);
    
    return float3(sinTheta * cos(phi), sinTheta * sin(phi),cosTheta);
}

[numthreads(32,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint i = 32 * id.y + id.x;
    float2 hammersleyVec = Hammersley(i,32 * 16);
    float3 dir = sphereSample_uniform(u, v);

    Surfel result;
    result.position = _worldPosCubemap.SampleLevel(sampler_point_clamp, dir, 0).rgb;
    result.albedo = _albedoCubemap.SampleLevel(sampler_point_clamp, dir, 0).rgb;

    float4 normal_and_mask = _normalCubemap.SampleLevel(sampler_point_clamp, dir, 0);
    result.normal = normal_and_mask.xyz;
    result.skyMask = saturate(1.0 - normal_and_mask.w);

    //check sky visibility
    result.position += (_probePos.xyz + dir) * result.skyMask;

    uint surfelIndex = id.x * 16 + id.y;
    _surfels[surfelIndex] = result;
}